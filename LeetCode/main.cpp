//
//  main.cpp
//  LeetCode
//
//  Created by ipuser on 2014/11/05.
//  Copyright (c) 2014å¹´ qzhai. All rights reserved.
//

#include <iostream>
#include "TwoSum.h"
#include "MedianOfTwoSortedArrays.h"
#include "LongestSubstringWithoutRepeatingCharacters.h"
#include "AddTwoNumbers.h"
#include "LongestPalindromicSubstring.h"
#include "ZigZagConversion.h"
#include "ReverseInteger.h"
#include "StringtoInteger.h"
#include "PalindromeNumber.h"
#include "IntegertoRoman.h"
#include "RomantoInteger.h"
#include "LongestCommonPrefix.h"
#include "3Sum.h"
#include "3SumClosest.h"
#include "4Sum.h"
#include "LetterCombinationsOfPhoneNumber.h"
#include "RemoveNthNodeFromEndOfList.h"
#include "ValidParentheses.h"
#include "GenerateParentheses.h"
#include "SwapNodesInPairs.h"
#include "RemoveDuplicatesFromSortedArray.h"
#include "RemoveElement.h"
#include "ImplementstrStr.h"
#include "DivideTwoIntegers.h"
#include "ReverseNodesInKGroup.h"
#include "MergeKSortedLists.h"
#include "NextPermutation.h"
#include "LongestValidParentheses.h"
#include "SearchInRotatedSortedArray.h"
#include "SearchForARange.h"
#include "SearchInsertPosition.h"
#include "CountAndSay.h"
#include "CombinationSum.h"
#include "SingleNumber.h"
#include "MaximumDepthOfBinaryTree.h"
#include "ExcelSheetColumnNumber.h"
#include "CombinationSum.h"
#include "CombinationSumII.h"
#include "EquilibriumIndex.h"
#include "FirstMissingPositive.h"
#include "TrappingRainWater.h"
#include "MultiplyStrings.h"
#include "Permutations.h"
#include "PermutationsII.h"
#include "Anagrams.h"
#include "Pow(xn).h"
#include "N-Queens.h"
#include "N-QueensII.h"
#include "MaximumSubarray.h"
#include "SpiralMatrix.h"
#include "LengthOfLastWord.h"
#include "SpiralMatrixII.h"
#include "JumpGame.h"
#include "PermutationSequence.h"
#include "RotateList.h"
#include "UniquePaths.h"
#include "UniquePathsII.h"
#include "MergeIntervals.h"
#include "InsertInterval.h"
#include "PlusOne.h"
#include "AddBinary.h"
#include "Sqrt_X.h"
#include "SimplifyPath.h"
#include "SetMatrixZeroes.h"
#include "SearchA2DMatrix.h"
#include "SortColors.h"
#include "ClimbingStairs.h"
#include "Combinations.h"
#include "Subsets.h"
#include "RemoveDuplicatesFromSortedArrayII.h"
#include "SudokuSolver.h"
#include "SearchInRotatedSortedArrayII.h"
#include "RemoveDuplicatesFromSortedListII.h"
#include "TextJustification.h"
#include "PartitionList.h"
#include "MergeSortedArray.h"
#include "SubsetsII.h"
#include "LargestRectangleInHistogram.h"
#include "ScrambleString.h"
#include "GrayCode.h"
#include "MinimumWindowSubstring.h"
#include "DecodeWays.h"
#include "ReverseLinkedListII.h"
#include "RestoreIPAddresses.h"
#include "UniqueBinarySearchTrees.h"
#include "UniqueBinarySearchTreesII.h"
#include "InterleavingString.h"
#include "RecoverBinarySearchTree.h"
#include "SymmetricTree.h"
#include "BinaryTreeLevelOrderTraversal.h"
#include "BinaryTreeLevelOrderTraversalII.h"
#include "BinaryTreeZigzagLevelOrderTraversal.h"
#include "ConstructBinaryTreeFromPreorderAndInorderTraversal.h"
#include "ConstructBinaryTreeFromInorderAndPostorderTraversal.h"
#include "ConvertSortedListToBinarySearchTree.h"
#include "BalancedBinaryTree.h"
#include "PathSum.h"
#include "PathSumII.h"
#include "FlattenBinaryTreeToLinkedList.h"
#include "PopulatingNextRightPointersInEachNode.h"
#include "PopulatingNextRightPointersInEachNodeII.h"
#include "PascalsTriangle.h"
#include "PascalsTriangleII.h"
#include "Triangle.h"
#include "BestTimeToBuyAndSellStockII.h"
#include "BestTimeToBuyAndSellStockIII.h"
#include "WordLadder.h"
#include "BinaryTreeMaximumPathSum.h"
#include "PalindromePartitioning.h"
#include "PalindromePartitioningII.h"
//#include "SurroundedRegions.h"
#include "GasStation.h"
#include "CloneGraph.h"
#include "Candy.h"
#include "SingleNumberII.h"
#include "CopyListWithRandomPointer.h"
#include "WordBreak.h"
#include "WordBreakII.h"
#include "LinkedListCycle.h"
#include "LinkedListCycleII.h"
#include "BinaryTreePreorderTraversal.h"
#include "ReorderList.h"
using namespace std;

int main(int argc, const char * argv[]) {
    // insert code here...
    //LongestPalindromicSubstringTest test;
    //MedianTwoSortedArraysTest test;
    
    ReorderListTest test;
    test.test();
    return 0;
}
